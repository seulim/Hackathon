@{
	Layout = null;
	string fromWhere = ViewBag.FromWhere;
	string signUpUrl = Urls.MobileWebUrlSecure + "/SignUp" + (String.IsNullOrEmpty(fromWhere) == true ? "" : "?fromWhere=" + fromWhere);
}


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ko" xml:lang="ko">
<head>
<meta http-equiv="content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" />
<meta http-equiv="Cache-Control" content="max-age=0" />
<meta name="format-detection" content="telephone=no" />
<title>Gmarket</title>
<link rel="stylesheet" type="text/css" href="@Urls.StyleUrlV2/join.css" />
<link rel="stylesheet" type="text/css" href="@Urls.StyleUrlV2/common.css" />
<script type="text/javascript" src="@Urls.ScriptUrl/js/mobile/main/common/jquery-1.7.1.min.js"></script>
<script type="text/javascript" src="@Urls.ScriptUrl/mobile/js/front_v4.js?v=4"></script>
<script type="text/javascript" src="@Urls.ScriptUrl/js/mobile/main/common/iscroll4.js"></script>
<script type="text/javascript" src="@Urls.ScriptUrl/js/mobile/main/common/jquery.touchSwipe.min.js"></script>
<script type="text/javascript" src="@Urls.ScriptUrl/js/mobile/main/common/angular.min.js"></script>
<script type="text/javascript" src="@Urls.ScriptUrl/js/mobile/main/common/angular-route.min.js"></script>
<script type="text/javascript">
	window.onload = function () {
		setTimeout(function () {
			window.scrollTo(0, 1)
		}, 100);
	}
</script>
<script>
	(function ($, window) {
		'use strict';
		if (!window.JoinSelect) window.JoinSelect = {};

		function getVendorPropName(name) { //
			var cssPrefixes = ['moz', 'webkit', 'o', 'ms'];
			if (name in this.style) return name;

			var orginName = name
		, capName = name.charAt(0).toUpperCase() + name.slice(1)
		, i = cssPrefixes.length;

			while (i--) {
				name = cssPrefixes[i] + capName;
				if (name in this.style) return name;
			}

			return orginName;
		}

		var isSupportTransform3d = (function () {
			var ret
		, doc = document
		, docElem = doc.documentElement
		, div = doc.createElement('div');

			div.style.cssText = 'position:absolute;top:-100em';
			docElem.appendChild(div);

			var prop = getVendorPropName.call(div, 'transform');
			div.style[prop] = 'translate3d(100px, 1px, 1px)';

			ret = window.getComputedStyle(div).getPropertyValue(prop);

			docElem.removeChild(div);
			return (!!ret && 'none' !== ret);
		})();

		window.JoinSelect.BoxPicker = (function () {
			return {
				init: function (container, options) {
					if (!(this.container = container).size()
					|| !(this.boxPicker = this.container.find('._boxPicker')).size()) {
						return;
					}

					this._initData(options);
					return this;
				}
			, _initData: function (options) {
				$.extend(this.options = {
					size: 1
					, index: 0
					, swipe: {
						triggerOnTouchEnd: true, threshold: 10
						, triggerOnTouchLeave: true
						, allowPageScroll: 'horizontal'
						, duration: 250, excludedElements: ''
						, swipeStatus: $.proxy(this.swipe, this)
					}
				}, (options || {}));

				this.curStep = 0;

				this.opts = this.boxPicker.find('li');
				this.optsSize = this.opts.size();
				this.optsGap = (this.opts.outerHeight(true) || this.options.height);

				this.minStep = -(this.options.index);
				this.maxStep = this.optsSize - (this.options.index + 1);
				this.maxDown = this.options.index * this.optsGap;
				this.maxUp = -(this.maxStep) * this.optsGap;

				this.container.swipe(this.options.swipe);
			}
			, change: function (selValue) {
				var self = this, step = 0;
				self.opts.each(function (i) {
					if ($(this).attr('data-val') === selValue) {
						step = i;
					}
				});

				this.step(step - Math.abs(this.minStep), 0);
				return this;
			}
			, getSelectedIndex: function () {
				return (this.curStep + 1);
			}
			, getSelectedValue: function () {
				return (this.opts.filter('._selected').attr('data-val') || '');
			}
			, step: function (step, duration) {
				this.curStep = Math.max(Math.min(step, this.maxStep), this.minStep);
				var pos = -(this.curStep) * this.optsGap; // index와 이동 좌표값 반대

				this.move(pos, (duration || this.options.duration));
				if ($.isFunction(this.options.changed)) {
					this.options.changed(this.getSelectedIndex(), this.getSelectedValue());
				}
			}
			, move: function (distance, duration) {
				var prop = getVendorPropName.call(this.boxPicker.get(0), 'transform');
				var duraProp = getVendorPropName.call(this.boxPicker.get(0), 'transition-duration');
				this.boxPicker.css(duraProp, (duration / 1000).toFixed(1) + 's');

				this.opts.removeClass('_selected');
				this.opts.eq(this.curStep + 1).addClass('_selected');

				return (isSupportTransform3d)
					? this.boxPicker.css(prop, 'translate3d(0, ' + (distance) + 'px, 0)')
					: this.boxPicker.css(prop, 'translate(0,' + (distance) + 'px)');
			}
			, swipe: function (e, phase, direction, distance) {
				e.preventDefault();

				// 좌우 flicking은 제외
				if ('left' === direction || 'right' === direction) return;
				var pos = this.optsGap * (-this.curStep); // index와 이동 좌표값 반대
				if ('move' === phase && ('up' === direction || 'down' === direction)) {

					pos += ('down' == direction ? distance : -distance);
					if ('down' === direction && this.maxDown <= pos) return;
					if ('up' === direction && this.maxUp >= pos) return;

					return this.move(pos, 0);
				}

				if ('cancel' === phase) {
					return this.step(this.curStep, 0);
				}

				if ('end' == phase && ('up' === direction || 'down' === direction)) {
					var step = parseInt((distance / this.optsGap).toFixed(1), 10);
					// if (distance > this.options.swipe.threshold) {
					if (0 < (distance % this.optsGap)) {
						step += 1;
					}

					step = this.curStep + ('down' === direction ? -step : step);
					this.step(step, (this.options.threshold > distance ? 0 : undefined));
				}
			}
			};
		});
	})(jQuery, window);

	$(function () {

		//회원가입-select layer
//		$('.join_art.email_bx .btn_ok').bind('click', function () {
//			var txtLabel = $('.join_art.email_bx .sel_box');
//			var txtInput = $('.join_art.email_bx .join_inp');
//			var ulLength = $('.join_art.email_bx ul li').length - 1;
//			var liIndex = $('.join_art.email_bx ul').children('._selected').index();
//			if (ulLength == liIndex) {
//				txtLabel.hide();
//				txtInput.show();
//				txtInput.focus();
//			}
//		});
//		'use strict';
		var container = $('._boxPickerWrap');
		var boxPicker1 = new JoinSelect.BoxPicker().init(container.eq(0), {
			size: 3 // 표시 되는 개수
			, height: 40
			, index: 1 // 위치
			, changed: function (i, v) { // i : selected index, v : selected value
			}
		});
		boxPicker1.step(-1, 1000);
@if (ViewBag.MethodType != "M")
{
		<text>
		var boxPicker2 = new JoinSelect.BoxPicker().init(container.eq(1), {
			size: 3 // 표시 되는 개수
			, height: 40
			, index: 1 // 위치
			, changed: function (i, v) { // i : selected index, v : selected value
			}
		});
		boxPicker2.step(-1, 1000);
		</text>
}
	});
</script>
</head>
<body>
<script type="text/javascript">
	(function () {
		var app = angular.module('inputValidChkApp', ['ngRoute']);

		app.controller('inputValidChkController', ['$scope', '$http', function ($scope, $http) {
			$scope.pwpattern = /^(?=.*[a-zA-Z])(?=.*[!@@#$%^*+=-]|.*[0-9]).{6,15}$/;
			//var EnNum_pattern = /[^a-zA-Z0-9!\"#$%&\'()*+,-./:;<>=?@@[]\\^_`{|}~]/;
			$scope.inputValue = {
				hpNum2Txt: "@ViewBag.PhoneNo2nd",
				hpNum3Txt: "@ViewBag.PhoneNo3rd",
				idTxt: "",
				nameTxt: "",
				nameValidationResult: { valid: false, alertText: "" },
				idExistChkResult: { checkId: "", isUsable: false },
				pwTxt: "",
				pwValidationResult: { valid: false, alertText: "" },
				pw2Txt: "",
				pw2ValidationResult: { valid: false, alertText: "" },
				gbankpwTxt: "",
				gbankpwValidationResult: { valid: false, alertText: "" },
				gbankpw2Txt: "",
				gbankpw2ValidationResult: { valid: false, alertText: "" },
				email1Txt: "",
				email2Txt: "",
				emailValidationResult: { valid: false, alertText: "" }
			};

			$scope.phoneLayerBtnOkClick = function () {
				var selectedVal = $('#layer_phone ul li._selected').attr('data-val');
				$('.join_art.num_bx .sel_box').text(selectedVal);
				$('#sel_ph').val(selectedVal);
			}

			//아이디 중복체크 member api 호출
			$scope.idTxtChange = function () {
				if ($scope.inputValue.idTxt != undefined && $scope.inputValue.idTxt.length > 0 && ($scope.inputValue.idTxt != $scope.inputValue.idExistChkResult.checkId)) {
					var chkId = $scope.inputValue.idTxt;
					$http({ method: "POST", url: "/SignUp/GetExistsLoginId", data: { "id": chkId} }).
					success(function (data, status) {
						if (data != null && data != undefined) {
							$scope.inputValue.idExistChkResult.checkId = chkId;
							$scope.inputValue.idExistChkResult.isUsable = (data == "false") ? true : false; // api 결과는 중복아이디 존재하면 true , 즉 사용불가능
							return true; //api 호출성공
						} else {
							return false; //api 호출실패
						}
					}).
					error(function (data, status) {
						return false; //api 호출실패
					});
				}
			};

			$scope.pwTxtKeyup = function () {
				var inputVal = $scope.inputValue.pwTxt;
				if (inputVal == undefined) {
					return false;
				}
				else {
					var result = chkPassword(inputVal);
				}
				$scope.inputValue.pwValidationResult = result;
				this.pw2TxtKeyup();
@if (ViewBag.CustType == "PC")
{ 
				<text>this.gbankpwTxtKeyup();</text>
}
			};

			$scope.pw2TxtKeyup = function () {
				var result = { valid: true, alertText: "" };
				tmpStr = document.getElementById("pw_inp").value;

				if (tmpStr.length == 0) {
					result.alertText = "우선 비밀번호를 설정해 주세요";
					result.valid = false;
				}
				else if ($scope.inputValue.pwValidationResult.valid == false) {
					result.alertText = "비밀 번호가 조합기준에 적합하지 않습니다. 비밀번호를 다시 설정해 주세요";
					result.valid = false;
				}
				else if (tmpStr.length > 0 && tmpStr != $scope.inputValue.pw2Txt) {
					result.alertText = "비밀 번호가 일치하지 않습니다.";
					result.valid = false;
				}
				$scope.inputValue.pw2ValidationResult = result;
			}

			$scope.gbankpwTxtKeyup = function () {
				var result = { valid: true, alertText: "" };
				var inputVal = $scope.inputValue.gbankpwTxt;
				tmpStr = document.getElementById("pw_inp").value;

				if (tmpStr.length == 0) {
					result.alertText = "우선 비밀번호를 설정해 주세요";
					result.valid = false;
				}
				else if ($scope.inputValue.pwValidationResult.valid == false) {
					result.alertText = "비밀 번호가 조합기준에 적합하지 않습니다. 비밀번호를 다시 설정해 주세요.";
					result.valid = false;
				}
				else if (tmpStr.length > 0 && tmpStr == $scope.inputValue.gbankpwTxt) {
					result.alertText = "입력하신 G통장 비밀번호는 회원 가입 비밀번호와 동일하여 사용하실 수 없습니다.";
					result.valid = false;
				} else {
					if (inputVal == undefined) {
						return false;
					}
					else {
						result = chkPassword(inputVal);
					}
				}
				$scope.inputValue.gbankpwValidationResult = result;
				$scope.gbankpw2TxtKeyup();
			};

			$scope.gbankpw2TxtKeyup = function () {
				var result = { valid: true, alertText: "" };
				tmpStr = document.getElementById("gbankpw_inp").value;

				if (tmpStr.length == 0) {
					result.alertText = "우선 G통장 비밀번호를 설정해 주세요";
					result.valid = false;
				}
				else if ($scope.inputValue.gbankpwValidationResult.valid == false) {
					result.alertText = "G통장 비밀 번호가 조합기준에 적합하지 않습니다. 비밀번호를 다시 설정해 주세요";
					result.valid = false;
				}
				else if (tmpStr.length > 0 && tmpStr != $scope.inputValue.gbankpw2Txt) {
					result.alertText = "G통장 비밀 번호가 일치하지 않습니다.";
					result.valid = false;
				}
				$scope.inputValue.gbankpw2ValidationResult = result;
			}

			$scope.emailLayerBtnOkClick = function () {
				var seletedVal = $('#layer_email ul li._selected').attr('data-val');
				var txtLabel = $('.join_art.email_bx .sel_box');
				var txtInput = $('#sel_email');
				var ulLength = $('.join_art.email_bx ul li').length - 1;
				var liIndex = $('.join_art.email_bx ul').children('._selected').index();
				txtLabel.hide();
				txtInput.show();
				if (ulLength == liIndex) {
					txtInput.val("");
					txtInput.prop("readonly", false);
					txtInput.focus();
				} else {
					txtInput.val(seletedVal);
					txtInput.prop("readonly", true);
				}
				$scope.emailTxtChange();
			}

			$scope.emailTxtChange = function () {
				var result = { valid: true, alertText: "" };
				var email1 = document.getElementById("email_inp").value;
				var email2 = document.getElementById("sel_email").value;
				var emailForChk = email1 + "@@" + email2;
				//var emailPattern = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i; //이메일 정규식
				var isEmail2 = /^[ㄱ-힣\w-\.\_]{1,}\@@([\da-zA-Z-]{1,}\.){1,}[\da-zA-Z-]{2,3}$/;
				var isHan = /[ㄱ-ㅎ가-힣]/g;

				if (email1 != "" && email2 != "") {
					if (!isEmail2.test(emailForChk) || isHan.test(emailForChk)) {
						result.valid = false;
						result.alertText = "이메일 주소를 다시 확인해주세요.";
						$scope.inputValue.emailValidationResult = result;
						return false;
					} else if(emailForChk.length > 50){
						result.valid = false;
						result.alertText = "이메일 글자수가 도메인 포함하여 전체 50자 이내로 입력해주세요.";
						$scope.inputValue.emailValidationResult = result;
					} else { //TODO :이메일 중복체크
						$scope.emailExistChk();
					}
				} else {
					result.valid = false;
					result.alertText = "이메일 주소를 다시 확인해주세요.";
					$scope.inputValue.emailValidationResult = result;
					return false;
				}
				$scope.inputValue.emailValidationResult = result;
			}

			//이메일 중복체크 member api 호출
			$scope.emailExistChk = function () {
				var email1 = document.getElementById("email_inp").value;
				var email2 = document.getElementById("sel_email").value;
				var emailForChk = email1 + "@@" + email2;
				if (emailForChk != null && emailForChk.length > 0) {
					$http({ method: "POST", url: "/SignUp/GetExistsEmail", data: { "email": emailForChk} }).
					success(function (data, status) {
						if (data != null && data != undefined) {
							if (data == "true") {// api 결과는 중복아이디 존재하면 true , 즉 사용불가능
								$scope.inputValue.emailValidationResult.valid = false;
								$scope.inputValue.emailValidationResult.alertText = "이미 사용중인 이메일입니다.";
							} else {
								$scope.inputValue.emailValidationResult.valid = true;
								$scope.inputValue.emailValidationResult.alertText = "";
							}
							return true; //api 호출성공
						} else {
							return false; //api 호출실패
						}
					}).
					error(function (data, status) {
						return false; //api 호출실패
					});
				}
			};

			$scope.hpNumFrontCheck = function () {
				var chkValue = $('#sel_ph').val();
				var result = false;

				var arrHpNumFront = ["010", "011", "016", "017", "018", "019"];
				for (var i = 0; i < arrHpNumFront.length; i++) {
					if (arrHpNumFront[i] == chkValue) {
						result = true;
						break;
					}
				}

				return result;
			}

			$scope.nameTxtByteLengthChk = function(){
				var result = { valid: true, alertText: "" };
				var chkValue = $('#name_inp').val();

				if(getByteLength(chkValue) > 30){ $('#name_inp').val(StringCutByte(chkValue, 30));}
				
				chkValue = $('#name_inp').val(); //30바이트 잘린 문자열로 다시 계산
				if( getByteLength(chkValue) < 1 || getByteLength(chkValue) > 30){ result.valid = false;}

				$scope.inputValue.nameValidationResult = result;
			}

			$scope.formCheck = function () {
				//hp
				if ($scope.joinForm.hpNum2 == undefined || $scope.joinForm.hpNum3 == undefined) { // 개인(PP) & 휴대폰인증(M)
					if (joinForm.hidHpNumTxt.value.length <= 0) return false;
				} else {
					if (!$scope.joinForm.hpNum2.$valid || !$scope.joinForm.hpNum3.$valid || !$scope.hpNumFrontCheck()) {// 개인(PP) & 아이핀인증(I), 사업자(PC)
						alert("휴대폰번호를 정확히 입력해 주세요.");
						return false;
					}
				}

				//id
				if (!$scope.joinForm.userId.$valid) {
					alert("회원 아이디(ID)는 띄어쓰기 없이 6~10자리의 영문자와 숫자 조합만 가능합니다.");
					return false;
				}

				//id 중복체크
				if ($scope.idTxtChange()) {
					if ($scope.inputValue.idTxt == $scope.inputValue.idExistChkResult.checkId) {
						if ($scope.inputValue.idExistChkResult.isUsable == false) {
							alert("이미 사용중인 아이디입니다.");
							return false;
						}
					}
				} else {
					if ($scope.inputValue.idTxt != $scope.inputValue.idExistChkResult.checkId) {
						alert("다시 시도해주세요.");
						return false;
					}
				}

				//비밀번호
				if (!$scope.inputValue.pwValidationResult.valid || !$scope.joinForm.userPW.$valid) {
					alert("비밀 번호가 조합기준에 적합하지 않습니다. 비밀번호를 다시 설정해 주세요.");
					return false;
				}

				//비밀번호 재입력
				if (!$scope.inputValue.pw2ValidationResult.valid) {
					alert("비밀번호가 일치하지 않습니다.");
					return false;
				}

				//g통장 비밀번호
				if ($scope.joinForm.gbankPW != undefined) {//사업자(PC)
					if (!$scope.inputValue.gbankpwValidationResult.valid || !$scope.joinForm.gbankPW.$valid) {
						alert("g통장 비밀 번호가 조합기준에 적합하지 않습니다. 비밀번호를 다시 설정해 주세요.");
						return false;
					}
					if (!$scope.inputValue.gbankpw2ValidationResult.valid) {
						alert("g통장 비밀번호가 일치하지 않습니다.");
						return false;
					}
				}

				//이메일
				if (!$scope.inputValue.emailValidationResult.valid) {
					alert($scope.inputValue.emailValidationResult.alertText);
					return false;
				}

				//이메일 중복체크
				if ($scope.emailExistChk()) { // api 호출 성공했다면..
					if ($scope.inputValue.emailValidationResult.valid == false) {
						alert($scope.inputValue.emailValidationResult.alertText);
						return false;
					} else {
						alert("다시 시도해주세요.");
						return false;
					}
				}

				//이름
				if ($scope.joinForm.name_inp != undefined && (!$scope.inputValue.nameValidationResult.valid || !$scope.joinForm.name_inp.$valid) ) {
					alert("이름은 최대 15자(30 Byte)이내로 한글/영문만 가능합니다.");
					return false;
				}


				$('#joinForm').attr('action', 'GetSignUpValidation').submit();

			}
		} ]);
	})();

	var chkPassword = function (pw) {
		var tmpStr = null;
		//var EnNum_pattern = /[^a-zA-Z0-9!\"#$%&\'()*+,-./:;<>=?@@[]\\^_`{|}~]/;
		var returnJson = { valid: true, alertText: "" };

		//ID와 동일한 패스워드 생성 금지
		tmpStr = document.getElementById("id_inp").value;
		if (tmpStr.length > 0 && tmpStr == pw) {
			returnJson.alertText = "회원 아이디를 비밀번호로 사용할 수 없습니다.";
			returnJson.valid = false;
			return returnJson;
		}

		tmpStr = document.getElementById("hidBirthdate").value;
		if (tmpStr.length > 0 && pw.length >= tmpStr.length) {
			if (pw.indexOf(tmpStr) >= 0) {
				returnJson.alertText = "생년월일이 포함된 비밀번호는 사용할 수 없습니다.";
				returnJson.valid = false;
				return returnJson;
			}
		}

		//아이핀 인증이면 휴대폰 번호 입력한 값으로 validation check , 휴대폰인증이면 인증시 사용한 폰번호로 validation check
		if("@ViewBag.MethodType" =="M"){
			tmpStr = "@ViewBag.PhoneNo3rd";
		}
		else{
			tmpStr = document.getElementById("hp_inp2").value;
		}
		if (tmpStr.length > 0) {
			if (pw.indexOf(tmpStr) >= 0 && tmpStr != "") {
				returnJson.alertText = "핸드폰번호가 포함된 비밀번호는 사용할 수 없습니다.";
				returnJson.valid = false;
				return returnJson;
			} 
		}

		//동일한 숫자(문자)로 이루어진 패스워드 생성 금지
		for (var i = 0; i <= pw.length - 4; i++) {
			if (pw.charAt(i) == pw.charAt(i + 1) && pw.charAt(i) == pw.charAt(i + 2) && pw.charAt(i) == pw.charAt(i + 3)) {
				returnJson.alertText = "4개 이상의 동일한 문자(숫자)가 포함된 비밀번호는 사용할 수 없습니다.";
				returnJson.valid = false;
				return returnJson;
			}
		}

		//연속된 숫자로 이루어진 패스워드 생성 금지
		strNum = "01234567890";
		for (var i = 0; i <= strNum.length - 4; i++) {
			tmpStr = strNum.substring(i, i + 4);
			if (pw.indexOf(tmpStr) >= 0) {
				returnJson.alertText = "연속된 4자리의 숫자가 포함된 비밀번호는 사용할 수 없습니다.";
				returnJson.valid = false;
				return returnJson;
			}
		}

		return returnJson;
	}

	function onlyNumber(event) {
		event = event || window.event;
		var keyID = (event.which) ? event.which : event.keyCode;
		if ((keyID >= 48 && keyID <= 57) || (keyID >= 96 && keyID <= 105) || keyID == 8 || keyID == 46 || keyID == 37 || keyID == 39)
			return;
		else
			return false;
	}

	function removeChar(event) {
		event = event || window.event;
		var keyID = (event.which) ? event.which : event.keyCode;
		if (keyID == 8 || keyID == 46 || keyID == 37 || keyID == 39)
			return;
		else
			event.target.value = event.target.value.replace(/[^0-9]/g, "");

		if (event.target.value.length == event.target.maxLength) {
			if (event.target.id == "hp_inp") {
				$("#hp_inp2").focus();
			}
		}
		if (event.target.value.length > event.target.maxLength) {
			event.target.value = event.target.value.slice(0, event.target.maxLength);
		}
	}

	function getByteLength(strValue) {
		var iLength = 0;
		var chValue;

		if (strValue == null)
			return (0);

		for (var i = 0; i < strValue.length; i++) {
			chValue = escape(strValue.charAt(i));

			if( chValue.length > 4 ){ 
				iLength+=2;
			}else{ 
				iLength++; 
			}
//			if (chValue.length == 1)				// 영문(1), 숫자(1)
//				iLength++;
//			else if (chValue.indexOf("%u") != -1)	// 한글(2)
//				iLength += 2;
//			else if (chValue.indexOf("%") != -1)	// ASCII(1)
//				iLength += chValue.length / 3;
		}
		return (iLength);
	}

	function StringCutByte(str, len){
		var l = 0;
		for (var i = 0; i < str.length; i++) {
			l += (str.charCodeAt(i) > 128) ? 2 : 1;
			if (l > len) return str.substring(0, i);
		}
		return str;
	}

</script>
<!-- WRAPPER -->
<div id="wrap">
	
	<!-- SKIP NAVI -->
	<div class="hp">
		<a href="#content">본문 바로가기</a>
	</div>
	<!-- //SKIP NAVI -->

	<!-- HEADER -->
	<div class="join_head">
		<h1><a href="@Urls.MobileWebUrl"><span class="sp_join">Gmarket</span> <span class="txt">회원가입</span></a></h1>
		<ul class="join_status">
		<li>1 가입</li>
		<li>2 약관동의</li>
		<li class="selected">3 정보입력</li>
		<li>4 가입완료</li>
		</ul>
	</div>
	<!-- //HEADER -->

	<hr />
	
	<!-- CONTENT -->
	<div id="content" class="ctns">
		
		<div class="join_cnt">
@if (ViewBag.CustType == "PC")
{
			<div class="ipin_bx">
				<ul class="ipin_lst">
				<li>@ViewBag.CompanyName</li>
				<li>@ViewBag.CompanyNo</li>
				</ul>
			</div>
}
			<div class="join_form" ng-app="inputValidChkApp">
				<form method="post" id="joinForm"  name="joinForm" ng-controller="inputValidChkController as inputCtrl" >
					<input type="hidden" name="PersonalInfoTreatAgrYN" id="PersonalInfoTreatAgrYN" value="@ViewBag.PersonalInfoTreatAgrYN">
					<input type="hidden" name="G9JoinYN" id="G9JoinYN" value="@ViewBag.G9JoinYN">
					<input type="hidden" name="hidName" id="hidName" value="@ViewBag.Name"> <!--  이름-->
					<input type="hidden" name="hidHpNumTxt" id="hidHpNumTxt" value="@ViewBag.PhoneNoTxt"><!-- 휴대폰번호 (- 포함) -->
					<input type="hidden" name="hidCustType" id="hidCustType" value="@ViewBag.CustType"> <!--  CustType-->
					<input type="hidden" name="hidMethodType" id="hidMethodType" value="@ViewBag.MethodType"><!-- MethodType  -->
					<input type="hidden" name="hidBirthdate" id="hidBirthdate" value= "@ViewBag.BirthDate"><!-- 생년월일 : YYMMDD //-->
					<input type="hidden" name="hidEncData" id="hidEncData" value="@ViewBag.EncData"> <!--  encData-->
					<input type="hidden" name="hidSeqNo" id="hidSeqNo" value="@ViewBag.SeqNo"><!-- seqNo-->
					<input type="hidden" name="hidCompanyName" id="hidCompanyName" value="@ViewBag.CompanyName"> <!--  회사이름-->
					<input type="hidden" name="hidCompanyNo" id="hidCompanyNo" value="@ViewBag.CompanyNo"><!-- 사업자번호-->
					<input type="hidden" name="PersonalInfoThirdPartySupportAgrYN" id="PersonalInfoThirdPartySupportAgrYN" value="@ViewBag.PersonalInfoThirdPartySupportAgrYN">
					<input type="hidden" name="PersonalInfoCollectUseAgrYN" id="PersonalInfoCollectUseAgrYN" value="@ViewBag.PersonalInfoCollectUseAgrYN">
					<input type="hidden" name="SmsRcvYn" id="SmsRcvYn" value="@ViewBag.SmsRcvYn">
					<input type="hidden" name="ERcvYn" id="ERcvYn" value="@ViewBag.ERcvYn">
					<input type="hidden" name="hidFromWhere" id="hidFromWhere" value="@ViewBag.FromWhere"><!-- fromWhere -->
					<fieldset>
						<legend class="blind">회원가입 정보입력</legend>
						<div class="join_artwrap">
@if (ViewBag.CustType == "PC" || (ViewBag.CustType == "PP" && ViewBag.MethodType == "I"))
{
							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art num_bx" ng-class="{accep_chk: joinForm.hpNum2.$valid && joinForm.hpNum3.$valid}">
								<div class="in_tb">
									<div class="in_td">
										<div class="form_bx select_bx">
											<label for="sel_ph" class="sel_box" onclick="popBlockUI('layer_phone');return false;">010</label>
											<input type="hidden" id="sel_ph" name="hidHpNum1" class="join_inp" value="010" />
										</div>
										<div id="layer_phone" class="ly_select" style="display:none">
											<h2 class="ly_tit">핸드폰 번호</h2>
											<div class="scroll_wrap _boxPickerWrap">
												<div class="scroll_inner">
													<ul class="_boxPicker">
														<li data-val="010"><a href="#">010</a></li>
														<li data-val="011"><a href="#">011</a></li>
														<li data-val="016"><a href="#">016</a></li>
														<li data-val="017"><a href="#">017</a></li>
														<li data-val="018"><a href="#">018</a></li>
														<li data-val="019"><a href="#">019</a></li>
													</ul>
												</div>
											</div>
											<div class="btn_bx">
												<a href="#" class="btn_cancle" onclick="popBlockUI('layer_phone');return false;">취소</a>
												<a href="#" class="btn_ok" onclick="popBlockUI('layer_phone');return false;" ng-click="phoneLayerBtnOkClick()">확인</a>
											</div>
										</div>
									</div>
									<div class="in_td">
										 <div class="form_bx">
											<label for="hp_inp"><strong>휴대폰번호</strong></label>
											<input type="tel" id="hp_inp" title="중간번호" class="join_inp" name="hpNum2" ng-model="inputValue.hpNum2Txt" ng-pattern="/\d{3,4}/" required maxlength="4" onkeydown="return onlyNumber(event)" onkeyup="removeChar(event)"/>
											<span class="dash">-</span>
											<input type="tel" id="hp_inp2" title="휴대폰 뒷번호" class="join_inp" name="hpNum3" ng-model="inputValue.hpNum3Txt" ng-pattern="/\d{4}/" required maxlength="4"  onkeydown="return onlyNumber(event)" onkeyup="removeChar(event)"/>
											<p class="retry_txt" ng-show="(joinForm.hpNum2.$error.required || joinForm.hpNum3.$error.required || joinForm.hpNum2.$error.pattern || joinForm.hpNum3.$error.pattern) && (joinForm.hpNum2.$dirty || joinForm.hpNum3.$dirty)">휴대폰번호를 정확히 입력해주세요.</p>
										</div>
									</div>
								</div>
							</div>
}
							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art id_bx" ng-class="{accep_chk: joinForm.userId.$valid && inputValue.idExistChkResult.isUsable && ($scope.inputValue.idTxt == $scope.inputValue.idExistChkResult.checkId)}">
								 <div class="form_bx">
									<label for="id_inp"><strong>ID</strong><span>띄어쓰기 없이 영/숫자 6-10자</span></label>
									<input type="text" id="id_inp" class="join_inp" maxlength="10" ng-pattern="/^[0-9A-Za-z_]{6,10}$/" ng-model="inputValue.idTxt" name="userId" required ng-change="idTxtChange()"/>
								 </div>
								<p class="accep_txt" ng-show="joinForm.userId.$valid && inputValue.idExistChkResult.isUsable && (joinForm.userId.$dirty)">사용가능한 아이디입니다.</p>
								<p class="retry_txt" ng-show="joinForm.userId.$valid&& !inputValue.idExistChkResult.isUsable && (joinForm.userId.$dirty)">사용불가능한 아이디입니다.</p>
								<p class="retry_txt" ng-show="(joinForm.userId.$error.required || joinForm.userId.$error.pattern) && (joinForm.userId.$dirty)">띄어쓰기 없이 영/숫자 6-10자로 입력해주세요.</p>
							</div>
							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art pw_bx" ng-class="{accep_chk: inputValue.pwValidationResult.valid && joinForm.userPW.$valid}">
								 <div class="form_bx">
									<label for="pw_inp"><strong>비밀번호</strong><span>6-15자의 영문, 숫자 및 특수문자 조합</span></label>
									<input type="password" id="pw_inp" class="join_inp" maxlength="15" ng-pattern="pwpattern" ng-model="inputValue.pwTxt" name="userPW" required ng-keyup="pwTxtKeyup()"/>
								 </div>
								<p class="retry_txt" ng-show="(joinForm.userPW.$error.required || joinForm.userPW.$error.pattern) && (joinForm.userPW.$dirty)">6-15자의 영문 대소문자, 숫자, 특수문자를 사용해주세요.</p>
								<p class="retry_txt" ng-show="!(inputValue.pwValidationResult.valid) && (joinForm.userPW.$dirty) ">{{inputValue.pwValidationResult.alertText}}</p>
							</div>
							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art pw_rebx" ng-class="{accep_chk: inputValue.pw2ValidationResult.valid}">
								 <div class="form_bx">
									<label for="pw_inp2"><strong>비밀번호 재입력</strong></label>
									<input type="password" id="pw_inp2" name="userPW2" class="join_inp" ng-model="inputValue.pw2Txt" ng-keyup="pw2TxtKeyup()" required/>
								 </div>
								<p class="retry_txt" ng-show="(!(inputValue.pw2ValidationResult.valid)) && (joinForm.userPW2.$dirty)">{{inputValue.pw2ValidationResult.alertText}}</p>
							</div>
@if (ViewBag.CustType == "PC")
{ 
							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art pw_bx" ng-class="{accep_chk: inputValue.gbankpwValidationResult.valid && joinForm.gbankPW.$valid}">
								 <div class="form_bx">
									<label for="gbankpw_inp"><strong>G통장 비밀번호</strong><span>6-15자의 영문, 숫자 및 특수문자 조합</span></label>
									<input type="password" id="gbankpw_inp" name="gbankPW" class="join_inp" maxlength="15" ng-pattern="pwpattern" ng-model="inputValue.gbankpwTxt" name="gbankPW" required ng-keyup="gbankpwTxtKeyup()"/>
								 </div>
								<p class="retry_txt" ng-show="(joinForm.gbankPW.$error.pattern || joinForm.gbankPW.$error.required) && (joinForm.gbankPW.$dirty)">6-15자의 영문 대소문자, 숫자, 특수문자를 사용해주세요.</p>
								<p class="retry_txt" ng-show="!(inputValue.gbankpwValidationResult.valid)">{{inputValue.gbankpwValidationResult.alertText}}</p>
							</div>
							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art pw_rebx" ng-class="{accep_chk: inputValue.gbankpw2ValidationResult.valid}">
								 <div class="form_bx">
									<label for="gbankpw_inp2"><strong>G통장 비밀번호 재입력</strong></label>
									<input type="password" id="gbankpw_inp2" name="gbankPW2" class="join_inp" ng-model="inputValue.gbankpw2Txt" ng-keyup="gbankpw2TxtKeyup()" required/>
								 </div>
								<p class="retry_txt" ng-show="(!(inputValue.gbankpw2ValidationResult.valid)) && (joinForm.gbankPW2.$dirty)">{{inputValue.gbankpw2ValidationResult.alertText}}</p>
							</div>
}
@if (ViewBag.CustType == "PP" && ViewBag.MethodType == "S")
{
							<div class="join_art name_bx" ng-class="{accep_chk: joinForm.name_inp.$valid}">
								<div class="form_bx">
									<label for="name_inp"><strong>이름</strong></label>
									<input type="text" name="name_inp" id="name_inp" class="join_inp" maxlength="30" ng-model="inputValue.nameTxt" ng-pattern="/^[0-9a-zA-Zㄱ-힣. ]{1,30}$/" required ng-keyup="nameTxtByteLengthChk()"/>
								</div>
								<p class="retry_txt" ng-show="(joinForm.name_inp.$error.required || joinForm.name_inp.$error.pattern || !(inputValue.nameValidationResult.valid)) && (joinForm.name_inp.$dirty)">이름은 최대 15자(30 Byte)이내로 한글/영문만 가능합니다.</p>
							</div>							<!--[D] 인증 후 accep_chk 클래스 추가 -->
							<div class="join_art num_bx" ng-class="{accep_chk: joinForm.hpNum2.$valid && joinForm.hpNum3.$valid}">
								<div class="in_tb">
									<div class="in_td">
										<div class="form_bx select_bx">
											<label for="sel_ph" class="sel_box" onclick="popBlockUI('layer_phone');return false;">010</label>
											<input type="hidden" id="sel_ph" name="hidHpNum1" class="join_inp" value="010" />
										</div>
										<div id="layer_phone" class="ly_select" style="display:none">
											<h2 class="ly_tit">핸드폰 번호</h2>
											<div class="scroll_wrap _boxPickerWrap">
												<div class="scroll_inner">
													<ul class="_boxPicker">
														<li data-val="010"><a href="#">010</a></li>
														<li data-val="011"><a href="#">011</a></li>
														<li data-val="016"><a href="#">016</a></li>
														<li data-val="017"><a href="#">017</a></li>
														<li data-val="018"><a href="#">018</a></li>
														<li data-val="019"><a href="#">019</a></li>
													</ul>
												</div>
											</div>
											<div class="btn_bx">
												<a href="#" class="btn_cancle" onclick="popBlockUI('layer_phone');return false;">취소</a>
												<a href="#" class="btn_ok" onclick="popBlockUI('layer_phone');return false;" ng-click="phoneLayerBtnOkClick()">확인</a>
											</div>
										</div>
									</div>
									<div class="in_td">
										 <div class="form_bx">
											<label for="hp_inp"><strong>휴대폰번호</strong></label>
											<input type="tel" id="hp_inp" title="중간번호" class="join_inp" name="hpNum2" ng-model="inputValue.hpNum2Txt" ng-pattern="/\d{3,4}/" required maxlength="4" onkeydown="return onlyNumber(event)" onkeyup="removeChar(event)"/>
											<span class="dash">-</span>
											<input type="tel" id="hp_inp2" title="휴대폰 뒷번호" class="join_inp" name="hpNum3" ng-model="inputValue.hpNum3Txt" ng-pattern="/\d{4}/" required maxlength="4"  onkeydown="return onlyNumber(event)" onkeyup="removeChar(event)"/>
											<p class="retry_txt" ng-show="(joinForm.hpNum2.$error.required || joinForm.hpNum3.$error.required || joinForm.hpNum2.$error.pattern || joinForm.hpNum3.$error.pattern) && (joinForm.hpNum2.$dirty || joinForm.hpNum3.$dirty)">휴대폰번호를 정확히 입력해주세요.</p>
										</div>
									</div>
								</div>
							</div>
}
							<div class="join_art email_bx">
								<div class="in_tb">
									<div class="in_td">
										<div class="form_bx">
											<label for="email_inp"><strong>이메일</strong></label>
											<input type="text" id="email_inp" name="email1" class="join_inp" ng-change="emailTxtChange()" ng-model="inputValue.email1Txt"/>
										</div>
										<p class="retry_txt" ng-show="!(inputValue.emailValidationResult.valid) && (joinForm.email1.$dirty || joinForm.email2.$dirty) ">{{inputValue.emailValidationResult.alertText}}</p>
									</div>
									<div class="in_td arroba">@@</div>
									<div class="in_td">
										<div class="form_bx select_bx">
											<label for="sel_email" class="sel_box" onclick="popBlockUI('layer_email');return false;">선택</label>
											<input type="text" id="sel_email" name="email2" class="join_inp" ng-change="emailTxtChange()" ng-model="inputValue.email2Txt"/>
											<span class="ico_arr" onclick="popBlockUI('layer_email');return false;">이메일 도메인 선택</span>
										</div>
										<div id="layer_email" class="ly_select" style="display:none">
											<h2 class="ly_tit">이메일</h2>
											<div class="scroll_wrap _boxPickerWrap">
												<div class="scroll_inner">
													<ul class="_boxPicker">
														<li data-val="naver.com"><a href="#">naver.com</a></li>
														<li data-val="hanmail.net"><a href="#">hanmail.net</a></li>
														<li data-val="nate.com"><a href="#">nate.com</a></li>
														<li data-val="hotmail.com"><a href="#">hotmail.com</a></li>
														<li data-val="yahoo.co.kr"><a href="#">yahoo.co.kr</a></li>
														<li data-val="lycos.co.kr"><a href="#">lycos.co.kr</a></li>
														<li data-val="gmail.com"><a href="#">gmail.com</a></li>
														<li data-val="dreamwiz.com"><a href="#">dreamwiz.com</a></li>
														<li data-val="korea.com"><a href="#">korea.com</a></li>
														<li data-val="chol.com"><a href="#">chol.com</a></li>
														<li data-val="cyworld.co.kr"><a href="#">cyworld.co.kr</a></li>
														<li data-val="korea.kr"><a href="#">korea.kr</a></li>
														<li data-val="직접입력"><a href="#">직접입력</a></li>
													</ul>
												</div>
											</div>
											<div class="btn_bx">
												<a href="#" class="btn_cancle" onclick="popBlockUI('layer_email');return false;">취소</a>
												<a href="#" class="btn_ok" onclick="popBlockUI('layer_email');return false;" ng-click="emailLayerBtnOkClick();">확인</a>
											</div>
										</div>
									</div>
								</div>
							</div>
@if (ViewBag.CustType == "PC")
{
							<div class="join_art sms_bx">
								 <div class="form_bx">
									<strong>쇼핑 메일 SMS 수신</strong>
									<p>할인쿠폰, 특가상품 이벤트정보를 받아보세요!<br />상품구매 관련 내용은 수신동의 여부와 관계없이 발송됩니다.</p>
									<div class="sms_chkbx">
										<span class="chk_bx"><input type="checkbox" name="chkEmailRcv" id="sms_chk1" class="inp_chk" checked/><label for="sms_chk1" class="chk_label">이메일 수신</label></span>
										<span class="chk_bx"><input type="checkbox" name="chkSmsRcv" id="sms_chk2" class="inp_chk" checked/><label for="sms_chk2" class="chk_label">SMS 수신</label></span>
									</div>
								 </div>
							</div>
}
						</div>
					</fieldset>
					<ul class="btn_bx">
					<li><a href="@signUpUrl" class="btn btn_gray">처음으로</a></li>
					<li><input type="button" title="회원가입" value="확인" class="btn btn_blue" ng-click="formCheck()"/></li>
					</ul>
				</form>
			</div>
			
		</div>
		
	</div>
	<!-- //CONTENT -->
	<hr />

	<!-- FOOTER -->
	
	<!-- //FOOTER -->

</div>
<!-- //WRAPPER -->

</body>
</html>